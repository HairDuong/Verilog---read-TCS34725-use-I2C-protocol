module color_detector (
    input wire clk,
    input wire rst,
    input wire [15:0] clear,
    input wire [15:0] red,
    input wire [15:0] green,
    input wire [15:0] blue,
    input wire data_valid,
    
    // Output GPIOs: [0]=Red, [1]=Green, [2]=Blue, [3]=Unknown
    output reg is_blue, is_green, is_red, is_unknown
);

// Định nghĩa các ngưỡng giá trị từ dữ liệu thực tế
localparam CLEAR_THRESH = 16'h00F0;  // Fh
localparam HIGH_THRESH  = 16'h0070;  // 7h
localparam MID_THRESH   = 16'h0030;  // 3h
localparam LOW_THRESH   = 16'h0010;  // 1h

// Biến tạm để lưu trạng thái màu
reg is_red, is_green, is_blue, is_unknown;

always @(posedge clk or negedge rst) begin
    if (~rst) begin
        color_gpio <= 4'b0000;
        is_red <= 0;
        is_green <= 0;
        is_blue <= 0;
        is_unknown <= 0;
    end else if (data_valid) begin
        // Kiểm tra điều kiện cho màu Green
        is_green <= (green >= HIGH_THRESH) && 
                   (blue >= MID_THRESH) && 
                   (red < MID_THRESH) && 
                   (clear >= CLEAR_THRESH);
        
        // Kiểm tra điều kiện cho màu Red
        is_red <= (red >= HIGH_THRESH) && 
                 (green < MID_THRESH) && 
                 (blue < MID_THRESH) && 
                 (clear >= CLEAR_THRESH);
        
        // Kiểm tra điều kiện cho màu Blue
        is_blue <= (blue >= HIGH_THRESH) && 
                  (green >= HIGH_THRESH) && 
                  (red < MID_THRESH) && 
                  (clear >= CLEAR_THRESH);
        
        // Kiểm tra trạng thái Unknown
        is_unknown <= ~(is_red | is_green | is_blue) && 
                     (clear >= MID_THRESH);
        
        // Xuất ra GPIO (chỉ 1 bit được set tại 1 thời điểm)
        
    end
end

endmodule